# catalog/forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.utils.text import slugify
from .models import (
    Factory, Product, ProductImage, Category,
    Purity, MetalColor, Style, InsertType, Coating
)


class FactoryRegistrationForm(UserCreationForm):
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–æ–¥–∞"""
    email = forms.EmailField(required=True, label="Email")
    factory_name = forms.CharField(max_length=200, label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞")
    address = forms.CharField(max_length=300, label="–ê–¥—Ä–µ—Å")
    phone = forms.CharField(max_length=20, label="–¢–µ–ª–µ—Ñ–æ–Ω")
    description = forms.CharField(widget=forms.Textarea, required=False, label="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞")
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
        labels = {
            'username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'password1': '–ü–∞—Ä–æ–ª—å',
            'password2': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',
        }
    
    def save(self, commit=True):
        user = super().save(commit=False)
        user.email = self.cleaned_data['email']
        if commit:
            user.save()
            Factory.objects.create(
                user=user,
                name=self.cleaned_data['factory_name'],
                address=self.cleaned_data['address'],
                phone=self.cleaned_data['phone'],
                email=self.cleaned_data['email'],
                description=self.cleaned_data.get('description', ''),
            )
        return user


class FactoryProfileForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–æ–¥–∞"""
    class Meta:
        model = Factory
        fields = ['name', 'description', 'address', 'phone', 'email', 'logo']
        labels = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'address': '–ê–¥—Ä–µ—Å',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'email': 'Email',
            'logo': '–õ–æ–≥–æ—Ç–∏–ø',
        }
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
        }


class ProductForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""

    class Meta:
        model = Product
        fields = [
            'category', 'material', 'name', 'description', 'manufacturer_brand',
            'purity', 'metal_color', 'style',
            'metal_weight', 'total_weight', 'size',
            'price', 'stock_quantity',
            'has_inserts', 'insert_types', 'insert_description',
            'coatings', 'has_stamp', 'stamp_description',
            'is_active', 'reference_photo_type', 'width_mm', 'height_mm', 'diameter_mm',
            'show_ruler', 'editor_data'
        ]
        labels = {
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'manufacturer_brand': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å/–ë—Ä–µ–Ω–¥',
            'purity': '–ü—Ä–æ–±–∞',
            'metal_color': '–¶–≤–µ—Ç –º–µ—Ç–∞–ª–ª–∞',
            'style': '–°—Ç–∏–ª—å',
            'metal_weight': '–ú–∞—Å—Å–∞ –º–µ—Ç–∞–ª–ª–∞ (–≥)',
            'total_weight': '–û–±—â–∞—è –º–∞—Å—Å–∞ –∏–∑–¥–µ–ª–∏—è (–≥)',
            'size': '–†–∞–∑–º–µ—Ä',
            'price': '–¶–µ–Ω–∞ ($)',
            'stock_quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
            'has_inserts': '–ù–∞–ª–∏—á–∏–µ –≤—Å—Ç–∞–≤–æ–∫',
            'insert_types': '–¢–∏–ø—ã –≤—Å—Ç–∞–≤–æ–∫',
            'insert_description': '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–æ–∫',
            'coatings': '–ü–æ–∫—Ä—ã—Ç–∏—è',
            'has_stamp': '–ù–∞–ª–∏—á–∏–µ –∫–ª–µ–π–º–∞',
            'stamp_description': '–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–µ–π–º–∞',
            'is_active': '–ê–∫—Ç–∏–≤–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)',
            'reference_photo_type': '–¢–∏–ø —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ',
            'width_mm': '–®–∏—Ä–∏–Ω–∞ (–º–º)',
            'height_mm': '–í—ã—Å–æ—Ç–∞ (–º–º)',
            'diameter_mm': '–î–∏–∞–º–µ—Ç—Ä (–º–º)',
            'show_ruler': '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–Ω–µ–π–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞',
            'editor_data': '–î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞',
        }
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'insert_description': forms.Textarea(attrs={'rows': 3}),
            'insert_types': forms.CheckboxSelectMultiple(),
            'coatings': forms.CheckboxSelectMultiple(),
            'width_mm': forms.HiddenInput(),
            'height_mm': forms.HiddenInput(),
            'diameter_mm': forms.HiddenInput(),
            'editor_data': forms.HiddenInput(),
        }


class ProductImageForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞"""
    class Meta:
        model = ProductImage
        fields = ['image', 'is_main', 'is_reference', 'order']
        labels = {
            'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'is_main': '–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ',
            'is_reference': 'üìè –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ',
            'order': '–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        }


class CustomerRegistrationForm(UserCreationForm):
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    email = forms.EmailField(required=True, label="Email")
    first_name = forms.CharField(max_length=30, required=False, label="–ò–º—è")
    last_name = forms.CharField(max_length=30, required=False, label="–§–∞–º–∏–ª–∏—è")

    class Meta:
        model = User
        fields = ('username', 'email', 'first_name', 'last_name', 'password1', 'password2')
        labels = {
            'username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'password1': '–ü–∞—Ä–æ–ª—å',
            'password2': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',
        }

    def save(self, commit=True):
        user = super().save(commit=False)
        user.email = self.cleaned_data['email']
        user.first_name = self.cleaned_data.get('first_name', '')
        user.last_name = self.cleaned_data.get('last_name', '')
        if commit:
            user.save()
        return user


class CategoryForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–±—Ä–∏–∫–æ–π"""

    class Meta:
        model = Category
        fields = ['name', 'parent', 'description', 'image']
        labels = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'parent': '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        }
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤—ã–±–æ—Ä–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
        self.fields['parent'].queryset = Category.objects.filter(parent__isnull=True, is_active=True)
        self.fields['parent'].required = False

    def save(self, commit=True, factory=None):
        category = super().save(commit=False)
        if not category.slug:
            category.slug = slugify(category.name)
        if factory:
            category.created_by = factory
        if commit:
            category.save()
        return category


class CharacteristicForm(forms.Form):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ø—Ä–æ–±–∞, —Ü–≤–µ—Ç, —Å—Ç–∏–ª—å –∏ —Ç.–¥.)"""
    characteristic_type = forms.ChoiceField(
        label="–¢–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
        choices=[
            ('purity', '–ü—Ä–æ–±–∞'),
            ('metal_color', '–¶–≤–µ—Ç –º–µ—Ç–∞–ª–ª–∞'),
            ('style', '–°—Ç–∏–ª—å'),
            ('insert_type', '–¢–∏–ø –≤—Å—Ç–∞–≤–∫–∏'),
            ('coating', '–ü–æ–∫—Ä—ã—Ç–∏–µ'),
        ]
    )
    name = forms.CharField(max_length=100, label="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = forms.CharField(
        widget=forms.Textarea(attrs={'rows': 3}),
        required=False,
        label="–û–ø–∏—Å–∞–Ω–∏–µ"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–±
    material_type = forms.ChoiceField(
        choices=[('', '---')] + list(Purity._meta.get_field('material_type').choices),
        required=False,
        label="–¢–∏–ø –º–µ—Ç–∞–ª–ª–∞"
    )
    purity_system = forms.ChoiceField(
        choices=[('', '---')] + list(Purity._meta.get_field('system').choices),
        required=False,
        label="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–±"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–æ–≤ –≤—Å—Ç–∞–≤–æ–∫
    insert_category = forms.ChoiceField(
        choices=[('', '---')] + list(InsertType._meta.get_field('category').choices),
        required=False,
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å—Ç–∞–≤–∫–∏"
    )