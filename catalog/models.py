# catalog/models.py
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator
import json


class Factory(models.Model):
    """–ú–æ–¥–µ–ª—å —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    address = models.CharField(max_length=300, verbose_name="–ê–¥—Ä–µ—Å")
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(verbose_name="Email")
    logo = models.ImageField(upload_to='factory_logos/', blank=True, null=True, verbose_name="–õ–æ–≥–æ—Ç–∏–ø")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    is_verified = models.BooleanField(default=False, verbose_name="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

    class Meta:
        verbose_name = "–ó–∞–≤–æ–¥"
        verbose_name_plural = "–ó–∞–≤–æ–¥—ã"
        ordering = ['-created_at']

    def __str__(self):
        return self.name


class Category(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π"""
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    slug = models.SlugField(unique=True, verbose_name="URL")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    image = models.ImageField(upload_to='categories/', blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ordering = ['name']

    def __str__(self):
        return self.name


class Material(models.Model):
    """–ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ –∏ —Ç.–¥.)"""
    MATERIAL_TYPES = [
        ('gold', '–ó–æ–ª–æ—Ç–æ'),
        ('silver', '–°–µ—Ä–µ–±—Ä–æ'),
        ('platinum', '–ü–ª–∞—Ç–∏–Ω–∞'),
        ('palladium', '–ü–∞–ª–ª–∞–¥–∏–π'),
    ]
    
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    material_type = models.CharField(max_length=20, choices=MATERIAL_TYPES, verbose_name="–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    purity = models.CharField(max_length=20, verbose_name="–ü—Ä–æ–±–∞", help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 585, 750, 925")

    class Meta:
        verbose_name = "–ú–∞—Ç–µ—Ä–∏–∞–ª"
        verbose_name_plural = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        unique_together = ['material_type', 'purity']

    def __str__(self):
        return f"{self.get_material_type_display()} {self.purity}"


class ReferenceImage(models.Model):
    """–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    REFERENCE_TYPES = [
        ('ear', 'üëÇ –£—Ö–æ'),
        ('finger', 'üíç –ü–∞–ª–µ—Ü'),
        ('wrist', '‚åö –ó–∞–ø—è—Å—Ç—å–µ'),
        ('neck', 'üìø –®–µ—è'),
    ]
    
    reference_type = models.CharField(
        max_length=20,
        choices=REFERENCE_TYPES,
        unique=True,
        verbose_name="–¢–∏–ø —ç—Ç–∞–ª–æ–Ω–∞"
    )
    image = models.ImageField(
        upload_to='reference_images/',
        verbose_name="–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    width_mm = models.DecimalField(
        max_digits=6,
        decimal_places=1,
        verbose_name="–®–∏—Ä–∏–Ω–∞ —ç—Ç–∞–ª–æ–Ω–∞ (–º–º)",
        help_text="–†–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    height_mm = models.DecimalField(
        max_digits=6,
        decimal_places=1,
        verbose_name="–í—ã—Å–æ—Ç–∞ —ç—Ç–∞–ª–æ–Ω–∞ (–º–º)",
        help_text="–†–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    description = models.TextField(
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        verbose_name_plural = "–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        ordering = ['reference_type']
    
    def __str__(self):
        return f"{self.get_reference_type_display()} ({self.width_mm}√ó{self.height_mm} –º–º)"


class Product(models.Model):
    """–ú–æ–¥–µ–ª—å —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è"""
    
    REFERENCE_TYPES = [
        ('ear', 'üëÇ –°–µ—Ä—å–≥–∏'),
        ('finger', 'üíç –ö–æ–ª—å—Ü–æ'),
        ('wrist', '‚åö –ë—Ä–∞—Å–ª–µ—Ç'),
        ('neck', 'üìø –ö–æ–ª—å–µ/–ü–æ–¥–≤–µ—Å–∫–∞'),
        ('none', '–ë–µ–∑ —ç—Ç–∞–ª–æ–Ω–∞'),
    ]
    
    factory = models.ForeignKey(Factory, on_delete=models.CASCADE, related_name='products', verbose_name="–ó–∞–≤–æ–¥")
    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='products', verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    material = models.ForeignKey(Material, on_delete=models.PROTECT, related_name='products', verbose_name="–ú–∞—Ç–µ—Ä–∏–∞–ª")
    
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    article = models.CharField(max_length=50, verbose_name="–ê—Ä—Ç–∏–∫—É–ª", unique=True, blank=True)  # ‚Üê blank=True!
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    
    weight = models.DecimalField(max_digits=6, decimal_places=2, validators=[MinValueValidator(0.01)], 
                                 verbose_name="–í–µ—Å (–≥)")
    size = models.CharField(max_length=50, blank=True, verbose_name="–†–∞–∑–º–µ—Ä")
    
    price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)], 
                                verbose_name="–¶–µ–Ω–∞")
    stock_quantity = models.IntegerField(default=0, validators=[MinValueValidator(0)], 
                                        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ")
    
    has_stones = models.BooleanField(default=False, verbose_name="–°–æ –≤—Å—Ç–∞–≤–∫–∞–º–∏")
    stone_description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–æ–∫")
    
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    views_count = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
    
    reference_photo_type = models.CharField(
        max_length=20,
        choices=REFERENCE_TYPES,
        default='none',
        verbose_name="–¢–∏–ø –∏–∑–¥–µ–ª–∏—è",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω"
    )
    
    width_mm = models.DecimalField(
        max_digits=6, 
        decimal_places=2, 
        blank=True, 
        null=True,
        verbose_name="–®–∏—Ä–∏–Ω–∞ (–º–º)",
        help_text="–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–≥–æ–Ω–∫–µ"
    )
    
    height_mm = models.DecimalField(
        max_digits=6, 
        decimal_places=2, 
        blank=True, 
        null=True,
        verbose_name="–í—ã—Å–æ—Ç–∞ (–º–º)",
        help_text="–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–≥–æ–Ω–∫–µ"
    )
    
    diameter_mm = models.DecimalField(
        max_digits=6, 
        decimal_places=2, 
        blank=True, 
        null=True,
        verbose_name="–î–∏–∞–º–µ—Ç—Ä (–º–º)",
        help_text="–î–ª—è –∫–æ–ª–µ—Ü - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    
    editor_data = models.TextField(
        blank=True,
        verbose_name="–î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞",
        help_text="JSON —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –º–∞—Å—à—Ç–∞–±–æ–º"
    )
    
    show_ruler = models.BooleanField(
        default=True,
        verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–Ω–µ–π–∫—É",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ª–∏–Ω–µ–π–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞"
    )

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['article']),
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['factory', 'is_active']),
        ]

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
        if not self.article:
            last_product = Product.objects.filter(
                factory=self.factory
            ).order_by('-id').first()
            
            if last_product and '-' in last_product.article:
                try:
                    last_number = int(last_product.article.split('-')[1])
                    next_number = last_number + 1
                except (ValueError, IndexError):
                    next_number = 1
            else:
                next_number = 1
            
            self.article = f"{self.factory.id}-{next_number:06d}"
        
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.article} - {self.name}"

    @property
    def in_stock(self):
        return self.stock_quantity > 0
    
    @property
    def has_dimensions(self):
        return any([self.width_mm, self.height_mm, self.diameter_mm])
    
    @property
    def dimensions_text(self):
        dims = []
        if self.width_mm:
            dims.append(f"–®: {self.width_mm} –º–º")
        if self.height_mm:
            dims.append(f"–í: {self.height_mm} –º–º")
        if self.diameter_mm:
            dims.append(f"√ò: {self.diameter_mm} –º–º")
        return " √ó ".join(dims) if dims else "–†–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    
    def get_editor_data(self):
        if self.editor_data:
            try:
                return json.loads(self.editor_data)
            except:
                return {}
        return {}
    
    def set_editor_data(self, data):
        self.editor_data = json.dumps(data)


class ProductImage(models.Model):
    """–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images', verbose_name="–¢–æ–≤–∞—Ä")
    image = models.ImageField(upload_to='products/', verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    is_main = models.BooleanField(default=False, verbose_name="–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ")
    # –î–û–ë–ê–í–ò–õ–ò –≠–¢–û –ü–û–õ–ï:
    is_reference = models.BooleanField(
        default=False, 
        verbose_name="–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ",
        help_text="–§–æ—Ç–æ —Å –ø–æ–¥–æ–≥–Ω–∞–Ω–Ω—ã–º –∏–∑–¥–µ–ª–∏–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º)"
    )
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫")
    uploaded_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['order', 'uploaded_at']

    def __str__(self):
        return f"–§–æ—Ç–æ {self.product.article}"


class Favorite(models.Model):
    """–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='favorites', verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='favorited_by', verbose_name="–¢–æ–≤–∞—Ä")
    added_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        unique_together = ['user', 'product']
        ordering = ['-added_at']

    def __str__(self):
        return f"{self.user.username} - {self.product.name}"