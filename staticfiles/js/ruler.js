// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞ –¥–ª—è —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π

class JewelryRuler {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–∏–Ω–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.options = {
            widthMm: options.widthMm || null,
            heightMm: options.heightMm || null,
            diameterMm: options.diameterMm || null,
            referenceType: options.referenceType || 'none',
            showHorizontal: true,
            showVertical: true,
            ...options
        };
        
        this.rulerVisible = false;
        this.init();
    }
    
    init() {
        this.createControls();
        this.createRulerOverlay();
        this.attachEventListeners();
    }
    
    createControls() {
        const controlsHTML = `
            <div class="ruler-controls">
                <div class="ruler-toggle">
                    <input type="checkbox" id="rulerToggle" />
                    <label for="rulerToggle">üìè –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–Ω–µ–π–∫—É</label>
                </div>
                ${this.options.widthMm || this.options.heightMm || this.options.diameterMm ? `
                    <button class="ruler-btn" id="showDimensions">üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã</button>
                ` : ''}
            </div>
            
            ${this.getReferenceInfo()}
        `;
        
        this.container.insertAdjacentHTML('afterbegin', controlsHTML);
    }
    
    getReferenceInfo() {
        const referenceTypes = {
            'ear': 'üëÇ –§–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω–µ —É—Ö–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ~60√ó50 –º–º)',
            'finger': 'üíç –§–æ—Ç–æ –Ω–∞ –ø–∞–ª—å—Ü–µ (–¥–∏–∞–º–µ—Ç—Ä –ø–∞–ª—å—Ü–∞: ~17 –º–º)',
            'wrist': '‚åö –§–æ—Ç–æ –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ (–æ–±—Ö–≤–∞—Ç: ~160 –º–º)',
            'neck': 'üìø –§–æ—Ç–æ –Ω–∞ —à–µ–µ (–æ–±—Ö–≤–∞—Ç: ~360 –º–º)'
        };
        
        if (this.options.referenceType && this.options.referenceType !== 'none') {
            return `
                <div class="reference-info">
                    <strong>–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ:</strong> ${referenceTypes[this.options.referenceType] || ''}
                </div>
            `;
        }
        return '';
    }
    
    createRulerOverlay() {
        const imageWrapper = this.container.querySelector('.ruler-image-wrapper');
        if (!imageWrapper) return;
        
        const overlay = document.createElement('div');
        overlay.className = 'ruler-overlay';
        overlay.id = 'rulerOverlay';
        overlay.style.display = 'none';
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞
        if (this.options.showHorizontal && this.options.widthMm) {
            const horizontal = document.createElement('div');
            horizontal.className = 'ruler-horizontal';
            
            const label = document.createElement('div');
            label.className = 'ruler-label ruler-label-horizontal';
            label.textContent = `${this.options.widthMm} –º–º`;
            
            horizontal.appendChild(label);
            overlay.appendChild(horizontal);
        }
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞
        if (this.options.showVertical && this.options.heightMm) {
            const vertical = document.createElement('div');
            vertical.className = 'ruler-vertical';
            
            const label = document.createElement('div');
            label.className = 'ruler-label ruler-label-vertical';
            label.textContent = `${this.options.heightMm} –º–º`;
            
            vertical.appendChild(label);
            overlay.appendChild(vertical);
        }
        
        imageWrapper.appendChild(overlay);
    }
    
    attachEventListeners() {
        const toggle = document.getElementById('rulerToggle');
        if (toggle) {
            toggle.addEventListener('change', (e) => {
                this.toggleRuler(e.target.checked);
            });
        }
        
        const showDimensionsBtn = document.getElementById('showDimensions');
        if (showDimensionsBtn) {
            showDimensionsBtn.addEventListener('click', () => {
                this.showDimensionsInfo();
            });
        }
    }
    
    toggleRuler(show) {
        const overlay = document.getElementById('rulerOverlay');
        if (overlay) {
            overlay.style.display = show ? 'block' : 'none';
            this.rulerVisible = show;
        }
    }
    
    showDimensionsInfo() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–ª–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        let dimensionsBlock = document.getElementById('dimensionsInfo');
        
        if (dimensionsBlock) {
            // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            dimensionsBlock.style.display = dimensionsBlock.style.display === 'none' ? 'block' : 'none';
            return;
        }
        
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        const dimensions = [];
        
        if (this.options.widthMm) {
            dimensions.push({label: '–®–∏—Ä–∏–Ω–∞', value: `${this.options.widthMm} –º–º`});
        }
        if (this.options.heightMm) {
            dimensions.push({label: '–í—ã—Å–æ—Ç–∞', value: `${this.options.heightMm} –º–º`});
        }
        if (this.options.diameterMm) {
            dimensions.push({label: '–î–∏–∞–º–µ—Ç—Ä', value: `${this.options.diameterMm} –º–º`});
        }
        
        const dimensionsHTML = `
            <div class="dimensions-info" id="dimensionsInfo">
                <h4>üìê –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏—è</h4>
                ${dimensions.map(dim => `
                    <div class="dimension-item">
                        <span class="dimension-label">${dim.label}:</span>
                        <span class="dimension-value">${dim.value}</span>
                    </div>
                `).join('')}
            </div>
        `;
        
        this.container.insertAdjacentHTML('beforeend', dimensionsHTML);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–Ω–µ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const rulerContainer = document.getElementById('jewelryRulerContainer');
    
    if (rulerContainer) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
        const widthMm = rulerContainer.dataset.widthMm;
        const heightMm = rulerContainer.dataset.heightMm;
        const diameterMm = rulerContainer.dataset.diameterMm;
        const referenceType = rulerContainer.dataset.referenceType;
        
        // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏–Ω–µ–π–∫–∏
        new JewelryRuler('jewelryRulerContainer', {
            widthMm: widthMm ? parseFloat(widthMm) : null,
            heightMm: heightMm ? parseFloat(heightMm) : null,
            diameterMm: diameterMm ? parseFloat(diameterMm) : null,
            referenceType: referenceType || 'none'
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = JewelryRuler;
}