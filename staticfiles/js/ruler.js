// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞ –¥–ª—è —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π

class JewelryRuler {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–∏–Ω–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        this.options = {
            widthMm: options.widthMm || null,
            heightMm: options.heightMm || null,
            diameterMm: options.diameterMm || null,
            referenceType: options.referenceType || 'none',
            editorData: options.editorData || null, // üìê –ù–û–í–û–ï: –î–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            ...options
        };

        // üìê –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.calibration = null;
        if (this.options.editorData) {
            try {
                const parsed = typeof this.options.editorData === 'string'
                    ? JSON.parse(this.options.editorData)
                    : this.options.editorData;
                this.calibration = parsed.calibration || null;

                if (this.calibration && this.calibration.pxPerMm) {
                    console.log('‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ editor_data:', this.calibration);
                } else {
                    console.warn('‚ö†Ô∏è editor_data –µ—Å—Ç—å, –Ω–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.');
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ editor_data:', e);
            }
        } else {
            console.warn('‚ö†Ô∏è editor_data –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –õ–∏–Ω–µ–π–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª–∏ –≤–º–µ—Å—Ç–æ –º–º.');
        }

        // –†–µ–∂–∏–º 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ–π)
        this.drawMode = false;
        this.lines = [];
        this.currentPoints = [];
        this.maxLines = 2;

        // –†–µ–∂–∏–º 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ + —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π (–∫–æ–º–±–æ!)
        this.gridMode = false;
        this.gridLines = [];
        this.gridCurrentPoints = [];

        // –†–µ–∂–∏–º 3: –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
        this.perpendicularMode = false;

        this.canvas = null;
        this.imageWrapper = null;

        this.init();
    }
    
    init() {
        this.createControls();
        this.setupCanvas();
        this.attachEventListeners();
    }
    
    createControls() {
        const controlsHTML = `
            <div class="ruler-controls">
                <div class="ruler-toggle-section">
                    <div class="ruler-main-buttons">
                        <button class="ruler-btn" id="toggleDrawModeBtn">
                            ‚úèÔ∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π
                        </button>
                        <button class="ruler-btn" id="toggleGridModeBtn">
                            üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã + –õ–∏–Ω–µ–π–∫–∞
                        </button>
                        <button class="ruler-btn" id="togglePerpendicularBtn">
                            üìè –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä
                        </button>
                    </div>
                    <button class="ruler-btn ruler-btn-small ruler-btn-secondary" id="clearRulerBtn" style="opacity: 0; pointer-events: none; transition: opacity 0.3s;">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                </div>
                
                <!-- –ò–Ω—Ñ–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è -->
                <div class="ruler-info" id="drawModeInfo" style="display:none;">
                    <p class="ruler-instruction">
                        <strong>üìè –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π:</strong><br>
                        –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 4 —Ä–∞–∑–∞, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å 2 –ª–∏–Ω–∏–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏.
                    </p>
                    <div class="ruler-status" id="drawStatus">
                        –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É...
                    </div>
                </div>
                
                <!-- –ò–Ω—Ñ–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–µ—Ç–∫–∏ + —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–ö–û–ú–ë–û!) -->
                <div class="ruler-info ruler-info-grid" id="gridModeInfo" style="display:none;">
                    <p class="ruler-instruction">
                        <strong>üìê –†–µ–∂–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç + –ª–∏–Ω–µ–π–∫–∞:</strong><br>
                        ‚Ä¢ –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–º<br>
                        ‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ 4 —Ä–∞–∑–∞, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å 2 –ª–∏–Ω–∏–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
                    </p>
                    <div class="ruler-coordinates" id="coordinatesDisplay">
                        <span>X: <strong id="coordX">0</strong> –º–º</span>
                        <span>Y: <strong id="coordY">0</strong> –º–º</span>
                    </div>
                    <div class="ruler-status" id="gridDrawStatus" style="margin-top: 1rem;">
                        –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏...
                    </div>
                </div>
                
                <!-- –ò–Ω—Ñ–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞ -->
                <div class="ruler-info ruler-info-perpendicular" id="perpendicularInfo" style="display:none;">
                    <p class="ruler-instruction">
                        <strong>üìè –†–µ–∂–∏–º –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞:</strong><br>
                        –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç –∫—É—Ä—Å–æ—Ä–∞ –∏–¥—É—Ç –¥–≤–µ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ (90¬∞).
                    </p>
                    <div class="ruler-coordinates">
                        <span>‚Üë –í–≤–µ—Ä—Ö: <strong id="perpendicularUp">0</strong> –º–º</span>
                        <span>‚Üí –í–ø—Ä–∞–≤–æ: <strong id="perpendicularRight">0</strong> –º–º</span>
                    </div>
                </div>
            </div>
            
            ${this.getReferenceInfo()}
        `;
        
        this.container.insertAdjacentHTML('afterbegin', controlsHTML);
    }
    
    getReferenceInfo() {
        const referenceTypes = {
            'ear': 'üëÇ –§–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω–µ —É—Ö–∞',
            'finger': 'üíç –§–æ—Ç–æ –Ω–∞ –ø–∞–ª—å—Ü–µ',
            'wrist': '‚åö –§–æ—Ç–æ –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ',
            'neck': 'üìø –§–æ—Ç–æ –Ω–∞ —à–µ–µ'
        };
        
        if (this.options.referenceType && this.options.referenceType !== 'none') {
            return `
                <div class="reference-info-ruler">
                    <strong>üìè –≠—Ç–∞–ª–æ–Ω:</strong> ${referenceTypes[this.options.referenceType] || ''}<br>
                    ${this.getDimensionsText()}
                </div>
            `;
        }
        return '';
    }
    
    getDimensionsText() {
        const dims = [];
        if (this.options.widthMm) dims.push(`–®–∏—Ä–∏–Ω–∞: ${this.options.widthMm} –º–º`);
        if (this.options.heightMm) dims.push(`–í—ã—Å–æ—Ç–∞: ${this.options.heightMm} –º–º`);
        return dims.length ? `<strong>–†–∞–∑–º–µ—Ä—ã:</strong> ${dims.join(' √ó ')}` : '';
    }
    
    setupCanvas() {
        this.imageWrapper = this.container.querySelector('.ruler-image-wrapper');
        if (!this.imageWrapper) return;
        
        const img = this.imageWrapper.querySelector('img');
        if (!img) return;
        
        const canvas = document.createElement('canvas');
        canvas.id = 'rulerCanvas';
        canvas.style.position = 'absolute';
        canvas.style.top = '0';
        canvas.style.left = '0';
        canvas.style.pointerEvents = 'none';
        canvas.style.display = 'none';
        
        img.onload = () => {
            canvas.width = img.offsetWidth;
            canvas.height = img.offsetHeight;
        };
        
        if (img.complete) {
            canvas.width = img.offsetWidth;
            canvas.height = img.offsetHeight;
        }
        
        this.imageWrapper.style.position = 'relative';
        this.imageWrapper.appendChild(canvas);
        
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
    }
    
    attachEventListeners() {
        const drawBtn = document.getElementById('toggleDrawModeBtn');
        const gridBtn = document.getElementById('toggleGridModeBtn');
        const perpendicularBtn = document.getElementById('togglePerpendicularBtn');
        const clearBtn = document.getElementById('clearRulerBtn');
        
        if (drawBtn) {
            drawBtn.addEventListener('click', () => this.toggleDrawMode());
        }
        
        if (gridBtn) {
            gridBtn.addEventListener('click', () => this.toggleGridMode());
        }
        
        if (perpendicularBtn) {
            perpendicularBtn.addEventListener('click', () => this.togglePerpendicularMode());
        }
        
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearLines());
        }
        
        if (this.canvas) {
            this.canvas.addEventListener('click', (e) => this.handleCanvasClick(e));
            this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
            this.canvas.addEventListener('mouseleave', () => this.handleMouseLeave());
        }
    }
    
    toggleDrawMode() {
        if (this.gridMode) this.toggleGridMode();
        if (this.perpendicularMode) this.togglePerpendicularMode();
        
        this.drawMode = !this.drawMode;
        
        const drawBtn = document.getElementById('toggleDrawModeBtn');
        const clearBtn = document.getElementById('clearRulerBtn');
        const drawInfo = document.getElementById('drawModeInfo');
        
        if (this.drawMode) {
            this.canvas.style.display = 'block';
            this.canvas.style.pointerEvents = 'auto';
            this.canvas.style.cursor = 'crosshair';
            drawBtn.textContent = '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å';
            drawBtn.classList.add('active');
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            clearBtn.style.opacity = '1';
            clearBtn.style.pointerEvents = 'auto';
            drawInfo.style.display = 'block';
            this.updateDrawStatus('–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É...');
        } else {
            this.canvas.style.display = 'none';
            this.canvas.style.pointerEvents = 'none';
            drawBtn.textContent = '‚úèÔ∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π';
            drawBtn.classList.remove('active');
            // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            clearBtn.style.opacity = '0';
            clearBtn.style.pointerEvents = 'none';
            drawInfo.style.display = 'none';
            this.clearLines();
        }
    }
    
    toggleGridMode() {
        if (this.drawMode) this.toggleDrawMode();
        if (this.perpendicularMode) this.togglePerpendicularMode();
        
        this.gridMode = !this.gridMode;
        
        const gridBtn = document.getElementById('toggleGridModeBtn');
        const clearBtn = document.getElementById('clearRulerBtn');
        const gridInfo = document.getElementById('gridModeInfo');
        
        if (this.gridMode) {
            this.canvas.style.display = 'block';
            this.canvas.style.pointerEvents = 'auto';
            this.canvas.style.cursor = 'crosshair';
            gridBtn.textContent = '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã';
            gridBtn.classList.add('active');
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            clearBtn.style.opacity = '1';
            clearBtn.style.pointerEvents = 'auto';
            gridInfo.style.display = 'block';
            this.drawGrid();
            this.updateGridDrawStatus('–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏...');
        } else {
            this.canvas.style.display = 'none';
            this.canvas.style.pointerEvents = 'none';
            gridBtn.textContent = 'üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã + –õ–∏–Ω–µ–π–∫–∞';
            gridBtn.classList.remove('active');
            // –ü–ª–∞–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            clearBtn.style.opacity = '0';
            clearBtn.style.pointerEvents = 'none';
            gridInfo.style.display = 'none';
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.gridLines = [];
            this.gridCurrentPoints = [];
        }
    }
    
    togglePerpendicularMode() {
        if (this.drawMode) this.toggleDrawMode();
        if (this.gridMode) this.toggleGridMode();
        
        this.perpendicularMode = !this.perpendicularMode;
        
        const perpendicularBtn = document.getElementById('togglePerpendicularBtn');
        const perpendicularInfo = document.getElementById('perpendicularInfo');
        
        if (this.perpendicularMode) {
            this.canvas.style.display = 'block';
            this.canvas.style.pointerEvents = 'auto';
            this.canvas.style.cursor = 'crosshair';
            perpendicularBtn.textContent = '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä';
            perpendicularBtn.classList.add('active');
            perpendicularInfo.style.display = 'block';
        } else {
            this.canvas.style.display = 'none';
            this.canvas.style.pointerEvents = 'none';
            perpendicularBtn.textContent = 'üìè –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä';
            perpendicularBtn.classList.remove('active');
            perpendicularInfo.style.display = 'none';
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }
    
    handleMouseMove(event) {
        if (this.gridMode) {
            this.handleGridMouseMove(event);
        } else if (this.perpendicularMode) {
            this.handlePerpendicularMouseMove(event);
        }
    }
    
    handleGridMouseMove(event) {
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        const xMm = this.pxToMm(x, 'width');
        const yMm = this.pxToMm(this.canvas.height - y, 'height');
        
        document.getElementById('coordX').textContent = xMm;
        document.getElementById('coordY').textContent = yMm;
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å—ë
        this.drawGrid();
        this.drawAllGridLines();
        this.drawCrosshair(x, y);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ - —Ä–∏—Å—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –¥–æ –∫—É—Ä—Å–æ—Ä–∞
        if (this.gridCurrentPoints.length === 1) {
            this.drawTemporaryLine(this.gridCurrentPoints[0], { x, y });
        }
    }
    
    handlePerpendicularMouseMove(event) {
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        const distanceUp = y;
        const distanceRight = this.canvas.width - x;
        
        const upMm = this.pxToMmDirect(distanceUp);
        const rightMm = this.pxToMmDirect(distanceRight);
        
        document.getElementById('perpendicularUp').textContent = upMm;
        document.getElementById('perpendicularRight').textContent = rightMm;
        
        this.drawPerpendicularLines(x, y, distanceUp, distanceRight);
    }
    
    drawGrid() {
        if (!this.gridMode) return;
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        const width = this.canvas.width;
        const height = this.canvas.height;
        
        this.ctx.strokeStyle = '#667eea';
        this.ctx.lineWidth = 2;
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—å (Y)
        this.ctx.beginPath();
        this.ctx.moveTo(40, 0);
        this.ctx.lineTo(40, height);
        this.ctx.stroke();
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Å—å (X)
        this.ctx.beginPath();
        this.ctx.moveTo(0, height - 40);
        this.ctx.lineTo(width, height - 40);
        this.ctx.stroke();
        
        this.drawAxisLabels();
    }
    
    drawAxisLabels() {
        const width = this.canvas.width;
        const height = this.canvas.height;

        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
        this.ctx.font = '600 11px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
        this.ctx.fillStyle = '#667eea';
        this.ctx.textAlign = 'center';
        
        if (this.options.widthMm) {
            const step = width / 5;
            const mmStep = this.options.widthMm / 5;
            
            for (let i = 0; i <= 5; i++) {
                const x = i * step;
                const mm = (i * mmStep).toFixed(0);
                
                this.ctx.beginPath();
                this.ctx.moveTo(x, height - 40);
                this.ctx.lineTo(x, height - 35);
                this.ctx.stroke();
                
                this.ctx.fillText(`${mm}`, x, height - 20);
            }
        }
        
        if (this.options.heightMm) {
            const step = height / 5;
            const mmStep = this.options.heightMm / 5;
            
            this.ctx.textAlign = 'right';
            
            for (let i = 0; i <= 5; i++) {
                const y = height - (i * step);
                const mm = (i * mmStep).toFixed(0);
                
                this.ctx.beginPath();
                this.ctx.moveTo(40, y);
                this.ctx.lineTo(45, y);
                this.ctx.stroke();
                
                this.ctx.fillText(`${mm}`, 30, y + 4);
            }
        }
    }
    
    drawCrosshair(x, y) {
        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –¢–æ–Ω–∫–∏–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫
        this.ctx.strokeStyle = 'rgba(102, 126, 234, 0.4)';
        this.ctx.lineWidth = 1;
        this.ctx.setLineDash([4, 4]);

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        this.ctx.beginPath();
        this.ctx.moveTo(x, 0);
        this.ctx.lineTo(x, this.canvas.height);
        this.ctx.stroke();

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        this.ctx.beginPath();
        this.ctx.moveTo(0, y);
        this.ctx.lineTo(this.canvas.width, y);
        this.ctx.stroke();

        this.ctx.setLineDash([]);

        // –¢–æ—á–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å)
        this.drawPoint(x, y, false); // false = –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä
    }
    
    drawTemporaryLine(p1, p2) {
        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradient = this.ctx.createLinearGradient(p1.x, p1.y, p2.x, p2.y);
        gradient.addColorStop(0, 'rgba(102, 126, 234, 0.6)');
        gradient.addColorStop(1, 'rgba(118, 75, 162, 0.6)');

        this.ctx.strokeStyle = gradient;
        this.ctx.lineWidth = 2;
        this.ctx.setLineDash([8, 4]);

        this.ctx.beginPath();
        this.ctx.moveTo(p1.x, p1.y);
        this.ctx.lineTo(p2.x, p2.y);
        this.ctx.stroke();

        this.ctx.setLineDash([]);
    }
    
    drawAllGridLines() {
        this.gridLines.forEach(line => {
            this.drawSavedLine(line.p1, line.p2, line.distanceMm);
        });
    }
    
    drawSavedLine(p1, p2, distanceMm) {
        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏ —á—Ç–æ –∏ –≤ drawLine
        const gradient = this.ctx.createLinearGradient(p1.x, p1.y, p2.x, p2.y);
        gradient.addColorStop(0, '#667eea');
        gradient.addColorStop(1, '#764ba2');

        this.ctx.strokeStyle = gradient;
        this.ctx.lineWidth = 2;
        this.ctx.setLineDash([]);
        this.ctx.shadowColor = 'rgba(102, 126, 234, 0.4)';
        this.ctx.shadowBlur = 8;
        this.ctx.beginPath();
        this.ctx.moveTo(p1.x, p1.y);
        this.ctx.lineTo(p2.x, p2.y);
        this.ctx.stroke();

        // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;

        // –¢–æ—á–∫–∏ –Ω–∞ –∫–æ–Ω—Ü–∞—Ö
        this.drawPoint(p1.x, p1.y);
        this.drawPoint(p2.x, p2.y);

        // –¢–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º
        const midX = (p1.x + p2.x) / 2;
        const midY = (p1.y + p2.y) / 2;

        this.drawMeasurementLabel(midX, midY - 10, `${distanceMm} –º–º`);
    }
    
    drawPerpendicularLines(x, y, distanceUp, distanceRight) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const upGradient = this.ctx.createLinearGradient(x, y, x, 0);
        upGradient.addColorStop(0, '#667eea');
        upGradient.addColorStop(1, 'rgba(102, 126, 234, 0.3)');

        const rightGradient = this.ctx.createLinearGradient(x, y, this.canvas.width, y);
        rightGradient.addColorStop(0, '#667eea');
        rightGradient.addColorStop(1, 'rgba(102, 126, 234, 0.3)');

        this.ctx.lineWidth = 2;
        this.ctx.setLineDash([]);
        this.ctx.shadowColor = 'rgba(102, 126, 234, 0.4)';
        this.ctx.shadowBlur = 8;

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–≤–≤–µ—Ä—Ö)
        this.ctx.strokeStyle = upGradient;
        this.ctx.beginPath();
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(x, 0);
        this.ctx.stroke();

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–≤–ø—Ä–∞–≤–æ)
        this.ctx.strokeStyle = rightGradient;
        this.ctx.beginPath();
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(this.canvas.width, y);
        this.ctx.stroke();

        // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;

        // –†–∏—Å—É–µ–º —É–≥–æ–ª 90¬∞ (–±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π)
        this.ctx.strokeStyle = '#667eea';
        this.ctx.lineWidth = 1.5;
        this.ctx.beginPath();
        this.ctx.arc(x, y, 25, -Math.PI / 2, 0);
        this.ctx.stroke();

        // –¢–µ–∫—Å—Ç "90¬∞" –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
        this.ctx.font = '600 12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
        this.ctx.fillStyle = '#667eea';
        this.ctx.textAlign = 'left';
        this.ctx.fillText('90¬∞', x + 30, y - 30);

        // –¢–æ—á–∫–∞ –Ω–∞ –∫—É—Ä—Å–æ—Ä–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å)
        this.drawPoint(x, y);

        const upMm = this.pxToMmDirect(distanceUp);
        const rightMm = this.pxToMmDirect(distanceRight);

        // –†–∞–∑–º–µ—Ä –≤–≤–µ—Ä—Ö (–ø–ª–∞—à–∫–∞)
        const upTextY = y / 2;
        this.drawMeasurementLabel(x + 40, upTextY, `‚Üë ${upMm} –º–º`);

        // –†–∞–∑–º–µ—Ä –≤–ø—Ä–∞–≤–æ (–ø–ª–∞—à–∫–∞)
        const rightTextX = x + (this.canvas.width - x) / 2;
        this.drawMeasurementLabel(rightTextX, y - 20, `‚Üí ${rightMm} –º–º`);
    }
    
    handleMouseLeave() {
        if (this.gridMode) {
            this.drawGrid();
            this.drawAllGridLines();
        } else if (this.perpendicularMode) {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }
    
    pxToMm(px, dimension) {
        // üìê –ù–û–í–û–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ –∏–∑ editor_data
        if (this.calibration && this.calibration.pxPerMm) {
            // –£—á–∏—Ç—ã–≤–∞–µ–º CSS scale –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            const cssScale = this.calibration.cssScale || 1;
            const logicalPx = px / cssScale; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∏–∫—Å–µ–ª–∏
            return (logicalPx / this.calibration.pxPerMm).toFixed(2);
        }

        // Fallback: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ widthMm/heightMm
        if (dimension === 'width' && this.options.widthMm) {
            return ((px / this.canvas.width) * this.options.widthMm).toFixed(2);
        } else if (dimension === 'height' && this.options.heightMm) {
            return ((px / this.canvas.height) * this.options.heightMm).toFixed(2);
        }

        console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏.');
        return px.toFixed(0) + ' (px)';
    }

    pxToMmDirect(px) {
        // üìê –ù–û–í–û–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ –∏–∑ editor_data
        if (this.calibration && this.calibration.pxPerMm) {
            // –£—á–∏—Ç—ã–≤–∞–µ–º CSS scale
            const cssScale = this.calibration.cssScale || 1;
            const logicalPx = px / cssScale;
            return (logicalPx / this.calibration.pxPerMm).toFixed(2);
        }

        // Fallback: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        if (!this.options.widthMm && !this.options.heightMm) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏.');
            return px.toFixed(0) + ' (px)';
        }

        let pxPerMm;

        if (this.options.widthMm && this.options.heightMm) {
            const pxPerMmWidth = this.canvas.width / this.options.widthMm;
            const pxPerMmHeight = this.canvas.height / this.options.heightMm;
            pxPerMm = (pxPerMmWidth + pxPerMmHeight) / 2;
        } else if (this.options.widthMm) {
            pxPerMm = this.canvas.width / this.options.widthMm;
        } else {
            pxPerMm = this.canvas.height / this.options.heightMm;
        }

        return (px / pxPerMm).toFixed(2);
    }
    
    handleCanvasClick(event) {
        if (!this.drawMode && !this.gridMode) return;
        
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        if (this.drawMode) {
            this.handleDrawModeClick(x, y);
        } else if (this.gridMode) {
            this.handleGridModeClick(x, y);
        }
    }
    
    handleDrawModeClick(x, y) {
        if (this.lines.length >= this.maxLines) {
            this.updateDrawStatus('–õ–∏–º–∏—Ç –ª–∏–Ω–∏–π (2). –û—á–∏—Å—Ç–∏—Ç–µ –¥–ª—è –Ω–æ–≤—ã—Ö.');
            return;
        }
        
        this.currentPoints.push({ x, y });
        
        if (this.currentPoints.length === 1) {
            this.drawPoint(x, y);
            this.updateDrawStatus(`–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É –¥–ª—è –ª–∏–Ω–∏–∏ ${this.lines.length + 1}...`);
        } else if (this.currentPoints.length === 2) {
            const [p1, p2] = this.currentPoints;
            this.drawLine(p1, p2);
            
            const distancePx = Math.sqrt(
                Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)
            );
            
            const distanceMm = this.convertToMm(distancePx);
            
            this.lines.push({ p1, p2, distancePx, distanceMm });
            this.currentPoints = [];
            
            if (this.lines.length < this.maxLines) {
                this.updateDrawStatus(`–õ–∏–Ω–∏—è ${this.lines.length}: ${distanceMm} –º–º. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π...`);
            } else {
                this.updateDrawStatus(`–í—Å–µ –ª–∏–Ω–∏–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã (${this.lines.length}/2).`);
            }
        }
    }
    
    handleGridModeClick(x, y) {
        if (this.gridLines.length >= this.maxLines) {
            this.updateGridDrawStatus(`–õ–∏–º–∏—Ç –ª–∏–Ω–∏–π (2). –û—á–∏—Å—Ç–∏—Ç–µ –¥–ª—è –Ω–æ–≤—ã—Ö.`);
            return;
        }
        
        this.gridCurrentPoints.push({ x, y });
        
        if (this.gridCurrentPoints.length === 1) {
            this.updateGridDrawStatus(`–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É –¥–ª—è –ª–∏–Ω–∏–∏ ${this.gridLines.length + 1}...`);
        } else if (this.gridCurrentPoints.length === 2) {
            const [p1, p2] = this.gridCurrentPoints;
            
            const distancePx = Math.sqrt(
                Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)
            );
            
            const distanceMm = this.convertToMm(distancePx);
            
            this.gridLines.push({ p1, p2, distancePx, distanceMm });
            this.gridCurrentPoints = [];
            
            this.drawGrid();
            this.drawAllGridLines();
            
            if (this.gridLines.length < this.maxLines) {
                this.updateGridDrawStatus(`–õ–∏–Ω–∏—è ${this.gridLines.length}: ${distanceMm} –º–º. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π...`);
            } else {
                this.updateGridDrawStatus(`–í—Å–µ –ª–∏–Ω–∏–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã (${this.gridLines.length}/2).`);
            }
        }
    }
    
    drawPoint(x, y, isMain = true) {
        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —Å —Ç–µ–Ω—å—é
        const radius = isMain ? 6 : 4;

        // –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ (–±–µ–ª–æ–µ)
        this.ctx.fillStyle = '#ffffff';
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
        this.ctx.shadowBlur = 4;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 2;
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius + 2, 0, 2 * Math.PI);
        this.ctx.fill();

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–æ—á–∫–∞ (–∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç)
        this.ctx.shadowBlur = 0;
        this.ctx.fillStyle = '#667eea'; // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);
        this.ctx.fill();

        // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 0;
    }
    
    drawLine(p1, p2) {
        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –¢–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradient = this.ctx.createLinearGradient(p1.x, p1.y, p2.x, p2.y);
        gradient.addColorStop(0, '#667eea');
        gradient.addColorStop(1, '#764ba2');

        this.ctx.strokeStyle = gradient;
        this.ctx.lineWidth = 2;
        this.ctx.setLineDash([]);
        this.ctx.shadowColor = 'rgba(102, 126, 234, 0.4)';
        this.ctx.shadowBlur = 8;
        this.ctx.beginPath();
        this.ctx.moveTo(p1.x, p1.y);
        this.ctx.lineTo(p2.x, p2.y);
        this.ctx.stroke();

        // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;

        this.drawPoint(p1.x, p1.y);
        this.drawPoint(p2.x, p2.y);

        const distancePx = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
        const distanceMm = this.convertToMm(distancePx);

        const midX = (p1.x + p2.x) / 2;
        const midY = (p1.y + p2.y) / 2;

        // üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ –ø–ª–∞—à–∫–∞
        this.drawMeasurementLabel(midX, midY - 10, `${distanceMm} –º–º`);
    }

    // üé® –ù–û–í–´–ô –ú–ï–¢–û–î: –ö—Ä–∞—Å–∏–≤–∞—è –ø–ª–∞—à–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º
    drawMeasurementLabel(x, y, text) {
        this.ctx.font = '600 14px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';

        // –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        const metrics = this.ctx.measureText(text);
        const padding = 8;
        const width = metrics.width + padding * 2;
        const height = 24;

        // –§–æ–Ω –ø–ª–∞—à–∫–∏ —Å —Ç–µ–Ω—å—é
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';
        this.ctx.shadowBlur = 8;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 2;

        this.ctx.fillStyle = '#667eea';
        this.ctx.beginPath();
        this.ctx.roundRect(x - width / 2, y - height / 2, width, height, 12);
        this.ctx.fill();

        // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 0;

        // –¢–µ–∫—Å—Ç
        this.ctx.fillStyle = '#ffffff';
        this.ctx.fillText(text, x, y);
    }
    
    convertToMm(distancePx) {
        return this.pxToMmDirect(distancePx);
    }
    
    clearLines() {
        // –û—á–∏—â–∞–µ–º –æ–±–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ª–∏–Ω–∏–π
        this.lines = [];
        this.currentPoints = [];
        this.gridLines = [];
        this.gridCurrentPoints = [];
        
        if (this.ctx && this.canvas) {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            
            // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ç–∫–∏ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
            if (this.gridMode) {
                this.drawGrid();
            }
        }
        
        this.updateDrawStatus('–õ–∏–Ω–∏–∏ –æ—á–∏—â–µ–Ω—ã. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É...');
        this.updateGridDrawStatus('–õ–∏–Ω–∏–∏ –æ—á–∏—â–µ–Ω—ã. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è...');
    }
    
    updateDrawStatus(message) {
        const statusEl = document.getElementById('drawStatus');
        if (statusEl) statusEl.textContent = message;
    }
    
    updateGridDrawStatus(message) {
        const statusEl = document.getElementById('gridDrawStatus');
        if (statusEl) statusEl.textContent = message;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const rulerContainer = document.getElementById('jewelryRulerContainer');

    if (rulerContainer) {
        new JewelryRuler('jewelryRulerContainer', {
            widthMm: parseFloat(rulerContainer.dataset.widthMm) || null,
            heightMm: parseFloat(rulerContainer.dataset.heightMm) || null,
            diameterMm: parseFloat(rulerContainer.dataset.diameterMm) || null,
            referenceType: rulerContainer.dataset.referenceType || 'none',
            editorData: rulerContainer.dataset.editorData || null // üìê –ù–û–í–û–ï: –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        });
    }
});