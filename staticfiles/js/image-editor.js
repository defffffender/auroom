// –†–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —ç—Ç–∞–ª–æ–Ω–æ–º –¥–ª—è —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
// –§–ò–ö–° 1: Canvas –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

class JewelryImageEditor {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.options = {
            canvasWidth: 800,
            canvasHeight: 600,
            referenceImage: options.referenceImage || null,
            referenceWidth: options.referenceWidth || 50,
            referenceHeight: options.referenceHeight || 60,
            ...options
        };
        
        this.canvas = null;
        this.referenceImg = null;
        this.productImg = null;
        this.referenceOpacity = 0.5;
        this.productOpacity = 1.0;
        this.currentZoom = 1;
        this.cropRect = null;
        this.cropMode = false;
        this.cropData = null;
        
        // üîÑ –§–ò–ö–° 2: –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è Undo/Redo
        this.history = [];
        this.historyStep = -1;
        this.maxHistory = 20;
        
        // üß≤ –§–ò–ö–° 3: Snap to reference
        this.snapEnabled = true;
        this.snapThreshold = 15; // –ø–∏–∫—Å–µ–ª–∏

        this.init();
    }
    
    init() {
    // üîß –§–ò–ö–°: –î–∞—ë–º –≤—Ä–µ–º—è DOM –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º canvas
    setTimeout(() => {
        this.createCanvas();
        if (this.options.referenceImage) {
            this.loadReferenceImage();
        }
        this.attachEventListeners();
    }, 100);
}
    
    createCanvas() {
    // üîß –§–ò–ö–°: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π canvas –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingCanvas = document.getElementById('fabricCanvas');
    if (existingCanvas) {
        existingCanvas.remove();
    }
    
    const existingContainer = this.container.querySelector('.canvas-container');
    if (existingContainer) {
        existingContainer.remove();
    }
    
    const canvasEl = document.createElement('canvas');
    canvasEl.id = 'fabricCanvas';
    
    // üîß –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const canvasWrapper = this.container.querySelector('.canvas-container-wrapper');
    if (!canvasWrapper) {
        console.error('‚ùå canvas-container-wrapper –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —É—á—ë—Ç–æ–º padding
    const wrapperRect = canvasWrapper.getBoundingClientRect();
    const wrapperStyles = window.getComputedStyle(canvasWrapper);
    const paddingLeft = parseInt(wrapperStyles.paddingLeft);
    const paddingRight = parseInt(wrapperStyles.paddingRight);
    const paddingTop = parseInt(wrapperStyles.paddingTop);
    const paddingBottom = parseInt(wrapperStyles.paddingBottom);
    
    // –î–æ—Å—Ç—É–ø–Ω–∞—è —à–∏—Ä–∏–Ω–∞ = —à–∏—Ä–∏–Ω–∞ wrapper –º–∏–Ω—É—Å padding
    const availableWidth = wrapperRect.width - paddingLeft - paddingRight;
    const availableHeight = wrapperRect.height - paddingTop - paddingBottom;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    const maxWidth = Math.min(availableWidth, 800);
    const maxHeight = Math.min(availableHeight, 600);
    
    // üîß –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
    if (maxWidth <= 0 || maxHeight <= 0) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã canvas:', maxWidth, maxHeight);
        return;
    }
    
    canvasEl.width = maxWidth;
    canvasEl.height = maxHeight;
    
    const canvasContainer = document.createElement('div');
    canvasContainer.className = 'canvas-container';
    canvasContainer.style.maxWidth = maxWidth + 'px';
    canvasContainer.style.maxHeight = maxHeight + 'px';
    canvasContainer.style.overflow = 'hidden';
    canvasContainer.style.position = 'relative';
    
    canvasContainer.appendChild(canvasEl);
    canvasWrapper.appendChild(canvasContainer);
    
    // üîß –§–ò–ö–°: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π canvas instance –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (this.canvas) {
        try {
            this.canvas.dispose();
        } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ canvas:', e);
        }
        this.canvas = null;
    }
    
    this.canvas = new fabric.Canvas('fabricCanvas', {
        backgroundColor: '#ffffff',
        selection: true,
        preserveObjectStacking: true,
        width: maxWidth,
        height: maxHeight
    });
    
    this.canvas.wrapperEl.style.overflow = 'hidden';
    this.canvas.wrapperEl.style.maxWidth = maxWidth + 'px';
    this.canvas.wrapperEl.style.maxHeight = maxHeight + 'px';
    
    console.log(`‚úÖ Canvas —Å–æ–∑–¥–∞–Ω: ${maxWidth}x${maxHeight}px`);
}
    
    loadReferenceImage() {
        const loadingOverlay = this.container.querySelector('.loading-overlay');
        if (loadingOverlay) loadingOverlay.classList.add('active');
        
        fabric.Image.fromURL(this.options.referenceImage, (img) => {
            const scale = Math.min(
                this.canvas.width / img.width,
                this.canvas.height / img.height
            ) * 0.8;
            
            img.set({
                left: this.canvas.width / 2,
                top: this.canvas.height / 2,
                originX: 'center',
                originY: 'center',
                scaleX: scale,
                scaleY: scale,
                opacity: this.referenceOpacity,
                selectable: false,
                evented: false,
                hasControls: false,
                hasBorders: false
            });
            
            this.referenceImg = img;
            this.canvas.add(img);
            this.canvas.sendToBack(img);
            this.canvas.renderAll();
            
            if (loadingOverlay) loadingOverlay.classList.remove('active');
            
            this.showStatus('‚úì –≠—Ç–∞–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è.', 'success');
        }, {
            crossOrigin: 'anonymous'
        });
    }
    
    loadProductImage(file) {
        if (!file || !file.type.match('image.*')) {
            this.showStatus('‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            return;
        }
        
        const loadingOverlay = this.container.querySelector('.loading-overlay');
        if (loadingOverlay) loadingOverlay.classList.add('active');
        
        const reader = new FileReader();
        reader.onload = (e) => {
            fabric.Image.fromURL(e.target.result, (img) => {
                if (this.productImg) {
                    this.canvas.remove(this.productImg);
                }
                
                const scale = Math.min(
                    this.canvas.width / img.width,
                    this.canvas.height / img.height
                ) * 0.5;
                
                img.set({
                    left: this.canvas.width / 2,
                    top: this.canvas.height / 2,
                    originX: 'center',
                    originY: 'center',
                    scaleX: scale,
                    scaleY: scale,
                    opacity: this.productOpacity
                });
                
                this.productImg = img;
                this.canvas.add(img);
                this.canvas.setActiveObject(img);
                this.canvas.bringToFront(img);
                this.canvas.renderAll();
                
                this.enableControls();
                this.updateDimensions();
                
                // üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                this.saveState();
                
                if (loadingOverlay) loadingOverlay.classList.remove('active');
                
                this.showStatus('‚úì –ò–∑–¥–µ–ª–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–¥–≥–æ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω.', 'success');
            });
        };
        
        reader.readAsDataURL(file);
    }
    
    attachEventListeners() {
    // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω–∞
    const opacitySlider = document.getElementById('referenceOpacity');
    if (opacitySlider) {
        opacitySlider.addEventListener('input', (e) => {
            this.referenceOpacity = parseFloat(e.target.value);
            if (this.referenceImg) {
                this.referenceImg.set('opacity', this.referenceOpacity);
                this.canvas.renderAll();
            }
        });
    }

    // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏—è
    const productOpacitySlider = document.getElementById('productOpacity');
    const opacityValueDisplay = document.querySelector('.opacity-value');
    if (productOpacitySlider) {
        productOpacitySlider.addEventListener('input', (e) => {
            this.productOpacity = parseFloat(e.target.value);
            if (this.productImg) {
                this.productImg.set('opacity', this.productOpacity);
                this.canvas.renderAll();
            }
            if (opacityValueDisplay) {
                opacityValueDisplay.textContent = `${Math.round(this.productOpacity * 100)}%`;
            }
        });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const fileInput = document.getElementById('productImageInput');
    if (fileInput) {
        fileInput.addEventListener('change', (e) => {
            if (e.target.files && e.target.files[0]) {
                this.loadProductImage(e.target.files[0]);
            }
        });
    }
    
    // Zoom –∫–Ω–æ–ø–∫–∏
    const zoomInBtn = document.getElementById('zoomIn');
    const zoomOutBtn = document.getElementById('zoomOut');
    const resetBtn = document.getElementById('resetPosition');
    
    if (zoomInBtn) {
        zoomInBtn.addEventListener('click', () => this.zoomIn());
    }
    if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', () => this.zoomOut());
    }
    if (resetBtn) {
        resetBtn.addEventListener('click', () => this.resetPosition());
    }
    
    // üìÑ Undo/Redo –∫–Ω–æ–ø–∫–∏
    const undoBtn = document.getElementById('undoBtn');
    const redoBtn = document.getElementById('redoBtn');
    
    if (undoBtn) {
        undoBtn.addEventListener('click', () => this.undo());
    }
    if (redoBtn) {
        redoBtn.addEventListener('click', () => this.redo());
    }
    
    // üß≤ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ Toggle Snap
    const snapBtn = document.getElementById('toggleSnapBtn');
    if (snapBtn) {
        snapBtn.addEventListener('click', () => this.toggleSnap());
    }
    
    // üëÅÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const previewBtn = document.getElementById('previewBtn');
    if (previewBtn) {
        previewBtn.addEventListener('click', () => this.showPreview());
    }
    
    // üìÑ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        // Ctrl+Z –∏–ª–∏ Cmd+Z = Undo
        if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
            e.preventDefault();
            this.undo();
        }
        // Ctrl+Shift+Z –∏–ª–∏ Cmd+Shift+Z = Redo
        else if ((e.ctrlKey || e.metaKey) && e.key === 'z' && e.shiftKey) {
            e.preventDefault();
            this.redo();
        }
        // Ctrl+Y –∏–ª–∏ Cmd+Y = Redo (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
        else if ((e.ctrlKey || e.metaKey) && e.key === 'y') {
            e.preventDefault();
            this.redo();
        }
    });
    
    // –°–æ–±—ã—Ç–∏—è Canvas
    this.canvas.on('object:modified', () => {
        this.saveState();
        this.updateDimensions();
    });
    
    this.canvas.on('object:scaling', () => {
        this.updateDimensions();
    });
    
    // üß≤ –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
    this.canvas.on('object:moving', (e) => {
        if (this.snapEnabled && e.target === this.productImg && this.referenceImg) {
            this.applySnap(e.target);
        }
        this.updateDimensions();
    });
}
    
    // üß≤ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ
    applySnap(obj) {
        if (!this.referenceImg) return;
        
        const ref = this.referenceImg;
        const threshold = this.snapThreshold;
        
        // –¶–µ–Ω—Ç—Ä —ç—Ç–∞–ª–æ–Ω–∞
        const refCenterX = ref.left;
        const refCenterY = ref.top;
        
        // –ö—Ä–∞—è —ç—Ç–∞–ª–æ–Ω–∞
        const refLeft = ref.left - (ref.width * ref.scaleX) / 2;
        const refRight = ref.left + (ref.width * ref.scaleX) / 2;
        const refTop = ref.top - (ref.height * ref.scaleY) / 2;
        const refBottom = ref.top + (ref.height * ref.scaleY) / 2;
        
        // –ö—Ä–∞—è –æ–±—ä–µ–∫—Ç–∞
        const objLeft = obj.left - (obj.width * obj.scaleX) / 2;
        const objRight = obj.left + (obj.width * obj.scaleX) / 2;
        const objTop = obj.top - (obj.height * obj.scaleY) / 2;
        const objBottom = obj.top + (obj.height * obj.scaleY) / 2;
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ü–µ–Ω—Ç—Ä—É —ç—Ç–∞–ª–æ–Ω–∞
        if (Math.abs(obj.left - refCenterX) < threshold) {
            obj.set({ left: refCenterX });
            this.showSnapGuide('vertical', refCenterX);
        }
        
        if (Math.abs(obj.top - refCenterY) < threshold) {
            obj.set({ top: refCenterY });
            this.showSnapGuide('horizontal', refCenterY);
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫—Ä–∞—è–º —ç—Ç–∞–ª–æ–Ω–∞ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ª–µ–≤—ã—Ö –∫—Ä–∞—ë–≤)
        if (Math.abs(objLeft - refLeft) < threshold) {
            obj.set({ left: refLeft + (obj.width * obj.scaleX) / 2 });
            this.showSnapGuide('vertical', refLeft);
        }
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–≤—ã—Ö –∫—Ä–∞—ë–≤
        if (Math.abs(objRight - refRight) < threshold) {
            obj.set({ left: refRight - (obj.width * obj.scaleX) / 2 });
            this.showSnapGuide('vertical', refRight);
        }
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–∏—Ö –∫—Ä–∞—ë–≤
        if (Math.abs(objTop - refTop) < threshold) {
            obj.set({ top: refTop + (obj.height * obj.scaleY) / 2 });
            this.showSnapGuide('horizontal', refTop);
        }
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–∏–∂–Ω–∏—Ö –∫—Ä–∞—ë–≤
        if (Math.abs(objBottom - refBottom) < threshold) {
            obj.set({ top: refBottom - (obj.height * obj.scaleY) / 2 });
            this.showSnapGuide('horizontal', refBottom);
        }
        
        obj.setCoords();
    }
    
    // üß≤ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â—É—é –ø—Ä–∏ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–∏
    showSnapGuide(type, position) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ
        this.clearSnapGuides();
        
        const guide = new fabric.Line(
            type === 'vertical' 
                ? [position, 0, position, this.canvas.height]
                : [0, position, this.canvas.width, position],
            {
                stroke: '#00ff00',
                strokeWidth: 1,
                strokeDashArray: [5, 5],
                selectable: false,
                evented: false,
                opacity: 0.7
            }
        );
        
        guide.set('snapGuide', true);
        this.canvas.add(guide);
        this.canvas.sendToBack(guide);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 500ms
        setTimeout(() => this.clearSnapGuides(), 500);
    }
    
    // üß≤ –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ
    clearSnapGuides() {
        const objects = this.canvas.getObjects();
        objects.forEach(obj => {
            if (obj.snapGuide) {
                this.canvas.remove(obj);
            }
        });
        this.canvas.renderAll();
    }
    
    // üß≤ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å snap
    toggleSnap() {
        this.snapEnabled = !this.snapEnabled;
        const snapBtn = document.getElementById('toggleSnapBtn');
        if (snapBtn) {
            if (this.snapEnabled) {
                snapBtn.textContent = 'üß≤ –ú–∞–≥–Ω–∏—Ç: –í–ö–õ';
                snapBtn.classList.add('active');
                this.showStatus('üß≤ –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ', 'success');
            } else {
                snapBtn.textContent = 'üß≤ –ú–∞–≥–Ω–∏—Ç: –í–´–ö–õ';
                snapBtn.classList.remove('active');
                this.showStatus('–ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ', 'info');
            }
        }
    }
    
    // üîÑ –ù–û–í–´–ï –ú–ï–¢–û–î–´: Undo/Redo
    saveState() {
    // üîß –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ canvas –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!this.productImg || !this.canvas) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ canvas');
        return;
    }
    
    const state = {
        left: this.productImg.left,
        top: this.productImg.top,
        scaleX: this.productImg.scaleX,
        scaleY: this.productImg.scaleY,
        angle: this.productImg.angle,
        opacity: this.productImg.opacity
    };
    
    // –£–¥–∞–ª—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    this.history = this.history.slice(0, this.historyStep + 1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.history.push(state);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.history.length > this.maxHistory) {
        this.history.shift();
    } else {
        this.historyStep++;
    }
    
    this.updateUndoRedoButtons();
    console.log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${this.historyStep + 1}/${this.history.length})`);
}
    
    undo() {
        if (this.historyStep > 0) {
            this.historyStep--;
            this.restoreState(this.history[this.historyStep]);
            this.updateUndoRedoButtons();
            this.showStatus('‚Ü∂ –û—Ç–º–µ–Ω–µ–Ω–æ', 'info');
        }
    }
    
    redo() {
        if (this.historyStep < this.history.length - 1) {
            this.historyStep++;
            this.restoreState(this.history[this.historyStep]);
            this.updateUndoRedoButtons();
            this.showStatus('‚Ü∑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ', 'info');
        }
    }
    
    restoreState(state) {
        if (!this.productImg) return;
        
        this.productImg.set(state);
        this.canvas.renderAll();
        this.updateDimensions();
    }
    
    updateUndoRedoButtons() {
        const undoBtn = document.getElementById('undoBtn');
        const redoBtn = document.getElementById('redoBtn');
        
        if (undoBtn) undoBtn.disabled = this.historyStep <= 0;
        if (redoBtn) redoBtn.disabled = this.historyStep >= this.history.length - 1;
    }
    
enableControls() {
    // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
    const controls = this.container.querySelectorAll('.control-btn:disabled, #productOpacity:disabled, .zoom-btn:disabled');
    controls.forEach(btn => btn.disabled = false);
    
    // üëÅÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const previewBtn = document.getElementById('previewBtn');
    if (previewBtn) {
        previewBtn.disabled = false;
    }
    
    // üß≤ –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞–≥–Ω–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    const snapBtn = document.getElementById('toggleSnapBtn');
    if (snapBtn) {
        snapBtn.disabled = false;
        if (this.snapEnabled) {
            snapBtn.classList.add('active');
            snapBtn.textContent = 'üß≤ –ú–∞–≥–Ω–∏—Ç: –í–ö–õ';
        }
    }
}
    
    zoomIn() {
        if (!this.productImg) return;
        
        const newScale = this.productImg.scaleX * 1.1;
        this.productImg.set({
            scaleX: newScale,
            scaleY: newScale
        });
        
        this.canvas.renderAll();
        this.updateDimensions();
        this.updateZoomLevel();
    }
    
    zoomOut() {
        if (!this.productImg) return;
        
        const newScale = this.productImg.scaleX * 0.9;
        this.productImg.set({
            scaleX: newScale,
            scaleY: newScale
        });
        
        this.canvas.renderAll();
        this.updateDimensions();
        this.updateZoomLevel();
    }
    
    resetPosition() {
        if (!this.productImg) return;
        
        this.productImg.set({
            left: this.canvas.width / 2,
            top: this.canvas.height / 2,
            angle: 0
        });
        
        this.canvas.renderAll();
        this.updateDimensions();
    }
    
    updateZoomLevel() {
        if (!this.productImg) return;
        
        const zoomLevel = (this.productImg.scaleX * 100).toFixed(0);
        const zoomDisplay = document.querySelector('.zoom-level');
        if (zoomDisplay) {
            zoomDisplay.textContent = `${zoomLevel}%`;
        }
    }
    
    createCropRect() {
        if (!this.productImg) return;
        
        const rectWidth = this.productImg.width * this.productImg.scaleX * 0.8;
        const rectHeight = this.productImg.height * this.productImg.scaleY * 0.8;
        
        this.cropRect = new fabric.Rect({
            left: this.productImg.left - rectWidth / 2,
            top: this.productImg.top - rectHeight / 2,
            width: rectWidth,
            height: rectHeight,
            fill: 'transparent',
            stroke: '#00ff00',
            strokeWidth: 3,
            strokeDashArray: [10, 5],
            cornerColor: '#00ff00',
            cornerSize: 12,
            transparentCorners: false,
            lockRotation: true,
            hasRotatingPoint: false
        });
        
        this.canvas.add(this.cropRect);
        this.canvas.setActiveObject(this.cropRect);
        this.canvas.bringToFront(this.cropRect);
        this.canvas.renderAll();
    }
    
    enableCropMode() {
        if (!this.productImg) {
            this.showStatus('‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ', 'warning');
            return;
        }
        
        this.cropMode = true;
        
        this.productImg.set({
            selectable: false,
            evented: false
        });
        
        if (this.referenceImg) {
            this.referenceImg.set('opacity', 0.2);
        }
        
        this.createCropRect();
        
        this.showStatus('‚úÇÔ∏è –û–±–≤–µ–¥–∏—Ç–µ —Ä–∞–º–∫–æ–π —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –∏–∑–¥–µ–ª–∏–µ (–±–µ–∑ —Ñ–æ–Ω–∞)', 'success');
        this.canvas.renderAll();
    }
    
    applyCrop() {
        if (!this.cropRect || !this.productImg) return;
        
        const cropData = {
            left: this.cropRect.left,
            top: this.cropRect.top,
            width: this.cropRect.width * this.cropRect.scaleX,
            height: this.cropRect.height * this.cropRect.scaleY
        };
        
        this.canvas.remove(this.cropRect);
        this.cropRect = null;
        this.cropMode = false;
        
        this.productImg.set({
            selectable: true,
            evented: true
        });
        
        if (this.referenceImg) {
            this.referenceImg.set('opacity', this.referenceOpacity);
        }
        
        this.cropData = cropData;
        
        this.updateDimensionsWithCrop();
        
        this.showStatus('‚úì –û–±–ª–∞—Å—Ç—å –∏–∑–¥–µ–ª–∏—è –≤—ã–¥–µ–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ø–æ–¥–≥–æ–Ω–∏—Ç–µ –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω.', 'success');
        this.canvas.renderAll();
    }
    
    cancelCrop() {
        if (this.cropRect) {
            this.canvas.remove(this.cropRect);
            this.cropRect = null;
        }
        
        this.cropMode = false;
        
        if (this.productImg) {
            this.productImg.set({
                selectable: true,
                evented: true
            });
        }
        
        if (this.referenceImg) {
            this.referenceImg.set('opacity', this.referenceOpacity);
        }
        
        this.canvas.renderAll();
    }
    
    updateDimensionsWithCrop() {
        if (!this.productImg || !this.referenceImg) return;
        
        const refScaledWidth = this.referenceImg.width * this.referenceImg.scaleX;
        const refScaledHeight = this.referenceImg.height * this.referenceImg.scaleY;
        
        let prodScaledWidth, prodScaledHeight;
        
        if (this.cropData) {
            prodScaledWidth = this.cropData.width;
            prodScaledHeight = this.cropData.height;
        } else {
            prodScaledWidth = this.productImg.width * this.productImg.scaleX;
            prodScaledHeight = this.productImg.height * this.productImg.scaleY;
        }
        
        const pxPerMmWidth = refScaledWidth / this.options.referenceWidth;
        const pxPerMmHeight = refScaledHeight / this.options.referenceHeight;
        const pxPerMm = (pxPerMmWidth + pxPerMmHeight) / 2;
        
        const productWidthMm = (prodScaledWidth / pxPerMm).toFixed(2);
        const productHeightMm = (prodScaledHeight / pxPerMm).toFixed(2);
        
        // üîß –ù–û–í–û–ï: –†–∞—Å—á–µ—Ç –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–æ–ª–µ—Ü
        let diameterMm = null;
        const referenceType = document.querySelector('[name="reference_photo_type"]')?.value;
        
        if (referenceType === 'finger') {
            // –î–ª—è –∫–æ–ª–µ—Ü –¥–∏–∞–º–µ—Ç—Ä = —Å—Ä–µ–¥–Ω—è—è –∏–∑ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã
            diameterMm = ((parseFloat(productWidthMm) + parseFloat(productHeightMm)) / 2).toFixed(2);
            
            const diameterInput = document.getElementById('id_diameter_mm');
            if (diameterInput) diameterInput.value = diameterMm;
            
            console.log(`üíç –î–∏–∞–º–µ—Ç—Ä –∫–æ–ª—å—Ü–∞: ${diameterMm} –º–º`);
        }
        
        const widthDisplay = document.getElementById('calculatedWidth');
        const heightDisplay = document.getElementById('calculatedHeight');
        
        if (widthDisplay) widthDisplay.textContent = `${productWidthMm} –º–º`;
        if (heightDisplay) heightDisplay.textContent = `${productHeightMm} –º–º`;
        
        const widthInput = document.getElementById('id_width_mm');
        const heightInput = document.getElementById('id_height_mm');
        
        if (widthInput) widthInput.value = productWidthMm;
        if (heightInput) heightInput.value = productHeightMm;
        
        this.saveEditorData();
    }
    
    updateDimensions() {
        this.updateDimensionsWithCrop();
    }
    
    saveEditorData() {
        if (!this.productImg) return;
        
        const editorData = {
            productImage: {
                left: this.productImg.left,
                top: this.productImg.top,
                scaleX: this.productImg.scaleX,
                scaleY: this.productImg.scaleY,
                angle: this.productImg.angle
            },
            cropData: this.cropData,
            referenceOpacity: this.referenceOpacity,
            timestamp: Date.now()
        };
        
        const editorDataInput = document.getElementById('id_editor_data');
        if (editorDataInput) {
            editorDataInput.value = JSON.stringify(editorData);
        }
    }
    
    showStatus(message, type = 'info') {
        let statusEl = this.container.querySelector('.editor-status');
        
        if (!statusEl) {
            statusEl = document.createElement('div');
            statusEl.className = 'editor-status';
            this.container.insertBefore(statusEl, this.container.firstChild);
        }
        
        statusEl.className = `editor-status ${type}`;
        statusEl.textContent = message;
        statusEl.style.opacity = '1';
        
        setTimeout(() => {
            statusEl.style.opacity = '0';
            setTimeout(() => {
                if (statusEl.parentNode) {
                    statusEl.remove();
                }
            }, 300);
        }, 5000);
    }
    
    exportImage() {
    if (!this.canvas || !this.productImg) {
        this.showStatus('‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ', 'warning');
        return null;
    }
    
    // üîß –§–ò–ö–°: –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    this.canvas.discardActiveObject();
    this.canvas.renderAll();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω
    const refWasVisible = this.referenceImg && this.referenceImg.opacity > 0;
    if (this.referenceImg) {
        this.referenceImg.set('opacity', 0);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏—è
    const originalOpacity = this.productImg.opacity;
    this.productImg.set('opacity', 1.0);
    
    this.canvas.renderAll();
    
    // üìê –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–¥–µ–ª–∏—è –Ω–∞ canvas
    const productBounds = this.productImg.getBoundingRect();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø (5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞)
    const padding = Math.max(productBounds.width, productBounds.height) * 0.05;
    
    const cropX = Math.max(0, productBounds.left - padding);
    const cropY = Math.max(0, productBounds.top - padding);
    const cropWidth = Math.min(
        productBounds.width + padding * 2,
        this.canvas.width - cropX
    );
    const cropHeight = Math.min(
        productBounds.height + padding * 2,
        this.canvas.height - cropY
    );
    
    // üé® –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = cropWidth;
    tempCanvas.height = cropHeight;
    const tempCtx = tempCanvas.getContext('2d');
    
    // üîß –§–ò–ö–°: –ö–æ–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π (–±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤)
    tempCtx.drawImage(
        this.canvas.lowerCanvasEl,
        cropX, cropY, cropWidth, cropHeight,
        0, 0, cropWidth, cropHeight
    );
    
    // –ü–æ–ª—É—á–∞–µ–º dataURL –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ canvas
    const dataURL = tempCanvas.toDataURL('image/png', 1.0);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.productImg.set('opacity', originalOpacity);
    if (this.referenceImg && refWasVisible) {
        this.referenceImg.set('opacity', this.referenceOpacity);
    }
    
    // üîß –§–ò–ö–°: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    this.canvas.setActiveObject(this.productImg);
    this.canvas.renderAll();
    
    console.log(`‚úÇÔ∏è –ò–∑–¥–µ–ª–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ: ${cropWidth.toFixed(0)}x${cropHeight.toFixed(0)}px`);
    
    return dataURL;
}
    
    dataURLtoBlob(dataURL) {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new Blob([u8arr], { type: mime });
    }

    getCalculatedDimensions() {
        const widthInput = document.getElementById('id_width_mm');
        const heightInput = document.getElementById('id_height_mm');
        const diameterInput = document.getElementById('id_diameter_mm');
        
        return {
            width: widthInput ? parseFloat(widthInput.value) : null,
            height: heightInput ? parseFloat(heightInput.value) : null,
            diameter: diameterInput ? parseFloat(diameterInput.value) : null
        };
    }
    
    // üëÅÔ∏è –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    showPreview() {
        if (!this.productImg) {
            this.showStatus('‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ', 'warning');
            return;
        }
        
        const imageDataURL = this.exportImage();
        const dims = this.getCalculatedDimensions();
        const referenceType = document.querySelector('[name="reference_photo_type"]')?.value;
        
        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = this.createPreviewModal(imageDataURL, dims, referenceType);
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('active'), 10);
    }
    
    // üëÅÔ∏è –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    createPreviewModal(imageDataURL, dims, referenceType) {
        const modal = document.createElement('div');
        modal.className = 'preview-modal';
        modal.id = 'previewModal';
        
        const referenceNames = {
            'ear': 'üëÇ –°–µ—Ä—å–≥–∏',
            'finger': 'üíç –ö–æ–ª—å—Ü–æ',
            'wrist': '‚åö –ë—Ä–∞—Å–ª–µ—Ç',
            'neck': 'üìø –ö–æ–ª—å–µ/–ü–æ–¥–≤–µ—Å–∫–∞',
            'none': '–ë–µ–∑ —ç—Ç–∞–ª–æ–Ω–∞'
        };
        
        modal.innerHTML = `
            <div class="preview-modal-content">
        <div class="preview-modal-header">
            <h3>üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞</h3>
            <button type="button" class="preview-close" onclick="this.closest('.preview-modal').remove()">‚úï</button>
        </div>
        
        <div class="preview-modal-body">
            <div class="preview-image-section">
                <img src="${imageDataURL}" 
                     alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" 
                     class="preview-image"
                     style="max-width: 100%; max-height: 400px; object-fit: contain;">
                <p class="preview-note">–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞</p>
            </div>
                    
                    <div class="preview-info-section">
                        <h4>üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–¥–µ–ª–∏—è</h4>
                        <div class="preview-dimensions">
                            ${dims.width ? `<div class="preview-dim-item">
                                <span class="preview-dim-label">–®–∏—Ä–∏–Ω–∞:</span>
                                <span class="preview-dim-value">${dims.width} –º–º</span>
                            </div>` : ''}
                            
                            ${dims.height ? `<div class="preview-dim-item">
                                <span class="preview-dim-label">–í—ã—Å–æ—Ç–∞:</span>
                                <span class="preview-dim-value">${dims.height} –º–º</span>
                            </div>` : ''}
                            
                            ${dims.diameter ? `<div class="preview-dim-item">
                                <span class="preview-dim-label">–î–∏–∞–º–µ—Ç—Ä:</span>
                                <span class="preview-dim-value">${dims.diameter} –º–º</span>
                            </div>` : ''}
                        </div>
                        
                        <div class="preview-reference-type">
                            <strong>–¢–∏–ø:</strong> ${referenceNames[referenceType] || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </div>
                        
                        <div class="preview-actions">
                            <button type="button" class="btn btn-success" onclick="document.querySelector('form[data-editor-form]').requestSubmit()">
                                ‚úì –í—Å—ë –≤–µ—Ä–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="this.closest('.preview-modal').remove()">
                                ‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="preview-modal-backdrop" onclick="this.parentElement.remove()"></div>
        `;
        
        return modal;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

// Crop mode handlers - –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ product_add.html
document.addEventListener('DOMContentLoaded', function() {
    // Crop –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ product_add.html
    const startCropBtn = document.getElementById('startCropBtn');
    const applyCropBtn = document.getElementById('applyCropBtn');
    const cancelCropBtn = document.getElementById('cancelCropBtn');
    
    if (startCropBtn) {
        startCropBtn.addEventListener('click', () => {
            if (window.jewelryEditor) {
                window.jewelryEditor.enableCropMode();
                startCropBtn.style.display = 'none';
                applyCropBtn.style.display = 'inline-block';
                cancelCropBtn.style.display = 'inline-block';
            }
        });
    }
    
    if (applyCropBtn) {
        applyCropBtn.addEventListener('click', () => {
            if (window.jewelryEditor) {
                window.jewelryEditor.applyCrop();
                startCropBtn.style.display = 'inline-block';
                applyCropBtn.style.display = 'none';
                cancelCropBtn.style.display = 'none';
            }
        });
    }
    
    if (cancelCropBtn) {
        cancelCropBtn.addEventListener('click', () => {
            if (window.jewelryEditor) {
                window.jewelryEditor.cancelCrop();
                startCropBtn.style.display = 'inline-block';
                applyCropBtn.style.display = 'none';
                cancelCropBtn.style.display = 'none';
            }
        });
    }
});


// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
document.addEventListener('DOMContentLoaded', function() {
    const productForm = document.querySelector('form[data-editor-form]');
    
    if (productForm) {
        let isSubmitting = false;
        
        productForm.addEventListener('submit', function(e) {
            const referenceType = document.querySelector('[name="reference_photo_type"]');
            const widthInput = document.getElementById('id_width_mm');
            const heightInput = document.getElementById('id_height_mm');
            
            // –ï—Å–ª–∏ –ù–ï –≤—ã–±—Ä–∞–Ω —ç—Ç–∞–ª–æ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if (!referenceType || referenceType.value === 'none') {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –±–µ–∑ —ç—Ç–∞–ª–æ–Ω–∞ (–æ–±—ã—á–Ω—ã–π submit)');
                return true; // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            }
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–∞–ª–æ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≥–æ–Ω–∫—É
            e.preventDefault();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (isSubmitting) {
                console.log('‚∏ô –§–æ—Ä–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è');
                return false;
            }
            
            if (!widthInput.value || !heightInput.value) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ–Ω–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤.');
                return false;
            }
            
            if (!window.jewelryEditor || !window.jewelryEditor.productImg) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä.');
                return false;
            }
            
            // üîß –§–ò–ö–°: –í—ã–∑—ã–≤–∞–µ–º exportImage —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
            console.log('üì∏ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
            const imageDataURL = window.jewelryEditor.exportImage();
            
            if (!imageDataURL) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
                return false;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            isSubmitting = true;
            
            const blob = window.jewelryEditor.dataURLtoBlob(imageDataURL);
            const formData = new FormData(productForm);
            formData.append('canvas_image', blob, 'product_fitted.png');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            const submitBtn = productForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ AJAX...');
            
            fetch(productForm.action || window.location.href, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                }
            })
            .then(response => {
                console.log('üì• Response:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);
                
                if (data.success) {
                    console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç...');
                    window.location.href = data.redirect_url || '/dashboard/';
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:', data.errors);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π.');
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;
                    isSubmitting = false;
                }
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ' + error.message);
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
                isSubmitting = false;
            });
            
            return false;
        });
    }
});